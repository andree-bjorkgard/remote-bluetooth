// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: proto/bluetooth.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BluetoothClient is the client API for Bluetooth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BluetoothClient interface {
	GetTrustedDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error)
	ConnectToDevice(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Response, error)
	DisconnectFromDevice(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*Response, error)
}

type bluetoothClient struct {
	cc grpc.ClientConnInterface
}

func NewBluetoothClient(cc grpc.ClientConnInterface) BluetoothClient {
	return &bluetoothClient{cc}
}

func (c *bluetoothClient) GetTrustedDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := c.cc.Invoke(ctx, "/grpc.Bluetooth/GetTrustedDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) ConnectToDevice(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Bluetooth/ConnectToDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluetoothClient) DisconnectFromDevice(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.Bluetooth/DisconnectFromDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluetoothServer is the server API for Bluetooth service.
// All implementations must embed UnimplementedBluetoothServer
// for forward compatibility
type BluetoothServer interface {
	GetTrustedDevices(context.Context, *Empty) (*Devices, error)
	ConnectToDevice(context.Context, *ConnectRequest) (*Response, error)
	DisconnectFromDevice(context.Context, *DisconnectRequest) (*Response, error)
	mustEmbedUnimplementedBluetoothServer()
}

// UnimplementedBluetoothServer must be embedded to have forward compatible implementations.
type UnimplementedBluetoothServer struct {
}

func (UnimplementedBluetoothServer) GetTrustedDevices(context.Context, *Empty) (*Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustedDevices not implemented")
}
func (UnimplementedBluetoothServer) ConnectToDevice(context.Context, *ConnectRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToDevice not implemented")
}
func (UnimplementedBluetoothServer) DisconnectFromDevice(context.Context, *DisconnectRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectFromDevice not implemented")
}
func (UnimplementedBluetoothServer) mustEmbedUnimplementedBluetoothServer() {}

// UnsafeBluetoothServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BluetoothServer will
// result in compilation errors.
type UnsafeBluetoothServer interface {
	mustEmbedUnimplementedBluetoothServer()
}

func RegisterBluetoothServer(s grpc.ServiceRegistrar, srv BluetoothServer) {
	s.RegisterService(&Bluetooth_ServiceDesc, srv)
}

func _Bluetooth_GetTrustedDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).GetTrustedDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Bluetooth/GetTrustedDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).GetTrustedDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_ConnectToDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).ConnectToDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Bluetooth/ConnectToDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).ConnectToDevice(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bluetooth_DisconnectFromDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluetoothServer).DisconnectFromDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Bluetooth/DisconnectFromDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluetoothServer).DisconnectFromDevice(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bluetooth_ServiceDesc is the grpc.ServiceDesc for Bluetooth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bluetooth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Bluetooth",
	HandlerType: (*BluetoothServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrustedDevices",
			Handler:    _Bluetooth_GetTrustedDevices_Handler,
		},
		{
			MethodName: "ConnectToDevice",
			Handler:    _Bluetooth_ConnectToDevice_Handler,
		},
		{
			MethodName: "DisconnectFromDevice",
			Handler:    _Bluetooth_DisconnectFromDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bluetooth.proto",
}
